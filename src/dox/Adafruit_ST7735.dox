/** @if English
 * @defgroup Display Methods for Working with the Display.
 * @else
 * @defgroup Display Методи для роботи з дисплеєм.
 * @endif
 * 
 *
 * @brief 
 * @{
 */

/** @brief Prints data to the serial port as human-readable ASCII text. */
size_t print(<ASCII>);

/**
 * @brief
 * @param to_print перелічувальний тип
 * @param base основа
 *
 * | base|Значення|          Опис                 |
 * |:---:|:------:|-------------------------------|
 * | BIN |   2    | Двійкова система числення     |
 * | OCT |   8    | Вісімкова система числення    |
 * | DEC |   10   | Десяткова система числення    |
 * | HEX |   16   | Шіснадцяткова чистема числення|
 * 
 */
size_t print(<any integer> to_print, int base = DEC);

/**
 * @brief
 *
 * @param number число з плаваючою крапкою
 * @param digits Кількість знаків після коми
 * @return size_t
 */
size_t print(<any float> number, int digits = 2);

/** @brief Prints data to the serial port as human-readable ASCII text. */
size_t println(<ASCII>);

/**
 * @brief
 * @param to_print перелічувальний тип
 * @param base основа
 *
 * | base|Значення|          Опис                 |
 * |:---:|:------:|-------------------------------|
 * | BIN |   2    | Двійкова система числення     |
 * | OCT |   8    | Вісімкова система числення    |
 * | DEC |   10   | Десяткова система числення    |
 * | HEX |   16   | Шіснадцяткова чистема числення|
 * 
 */
size_t println(<any integer> to_print, int base = DEC);

/**
 * @brief
 *
 * @param number
 * @param digits
 * @return size_t
 */
size_t println(<any float> number, int digits = 2);
/**
 * @brief
 *
 * @return size_t
 */
size_t println(void);

// These exist only with Adafruit_GFX (no subclass overrides)
/**
 * @brief Намалювати коло
 * 
 * @param x0 Координати центра кола
 * @param y0 Координати центра кола
 * @param r  Радіус кола
 * @param color Колір кола
 */
void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color);
void drawCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername,
                      uint16_t color);
/**
 * @brief Намалювати круг
 * 
 * @param x0 Координати центру круга
 * @param y0 Координати центру круга
 * @param r  Радіус круга
 * @param color Колір круга
 */
void fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color);
void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername,
                      int16_t delta, uint16_t color);
/**
 * @brief Намалювати трикутник
 * 
 * @param x0 Координати кута трикутника
 * @param y0 Координати кута трикутника
 * @param x1 Координати кута трикутника
 * @param y1 Координати кута трикутника
 * @param x2 Координати кута трикутника
 * @param y2 Координати кута трикутника
 * @param color Колір трикутника
 */
void drawTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2,
                  int16_t y2, uint16_t color);
/**
 * @brief Намалювати трикутник
 * 
 * @param x0 Координати кута трикутника
 * @param y0 Координати кута трикутника
 * @param x1 Координати кута трикутника
 * @param y1 Координати кута трикутника
 * @param x2 Координати кута трикутника
 * @param y2 Координати кута трикутника
 * @param color Колір трикутника
 */
void fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2,
                  int16_t y2, uint16_t color);
/**
 * @brief Намалювати прямокутник з закругленими кутами
 * 
 * @param x0 Координати лівого верхнього кута чотирикутника
 * @param y0 Координати лівого верхнього кута чотирикутника
 * @param w Ширина чотрикутника
 * @param h Висота чотрикутника
 * @param radius Радіус заокруглення кутів
 * @param color Колір чотирикутника
 */
void drawRoundRect(int16_t x0, int16_t y0, int16_t w, int16_t h, int16_t radius,
                   uint16_t color);
/**
 * @brief Намалювати заповнений прямокутник з закругленими кутами
 * 
 * @param x0 Координати лівого верхнього кута чотирикутника
 * @param y0 Координати лівого верхнього кута чотирикутника
 * @param w Ширина чотрикутника
 * @param h Висота чотрикутника
 * @param radius Радіус заокруглення кутів
 * @param color Колір чотирикутника
 */
void fillRoundRect(int16_t x0, int16_t y0, int16_t w, int16_t h, int16_t radius,
                   uint16_t color);
void drawBitmap(int16_t x, int16_t y, const uint8_t bitmap[], int16_t w,
                int16_t h, uint16_t color);
void drawBitmap(int16_t x, int16_t y, const uint8_t bitmap[], int16_t w,
                int16_t h, uint16_t color, uint16_t bg);
void drawBitmap(int16_t x, int16_t y, uint8_t *bitmap, int16_t w, int16_t h,
                uint16_t color);
void drawBitmap(int16_t x, int16_t y, uint8_t *bitmap, int16_t w, int16_t h,
                uint16_t color, uint16_t bg);
void drawXBitmap(int16_t x, int16_t y, const uint8_t bitmap[], int16_t w,
                 int16_t h, uint16_t color);
void drawGrayscaleBitmap(int16_t x, int16_t y, const uint8_t bitmap[],
                         int16_t w, int16_t h);
void drawGrayscaleBitmap(int16_t x, int16_t y, uint8_t *bitmap, int16_t w,
                         int16_t h);
void drawGrayscaleBitmap(int16_t x, int16_t y, const uint8_t bitmap[],
                         const uint8_t mask[], int16_t w, int16_t h);
void drawGrayscaleBitmap(int16_t x, int16_t y, uint8_t *bitmap, uint8_t *mask,
                         int16_t w, int16_t h);
void drawRGBBitmap(int16_t x, int16_t y, const uint16_t bitmap[], int16_t w,
                   int16_t h);
void drawRGBBitmap(int16_t x, int16_t y, uint16_t *bitmap, int16_t w,
                   int16_t h);
void drawRGBBitmap(int16_t x, int16_t y, const uint16_t bitmap[],
                   const uint8_t mask[], int16_t w, int16_t h);
void drawRGBBitmap(int16_t x, int16_t y, uint16_t *bitmap, uint8_t *mask,
                   int16_t w, int16_t h);
void drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color,
              uint16_t bg, uint8_t size);
void drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color,
              uint16_t bg, uint8_t size_x, uint8_t size_y);
void getTextBounds(const char *string, int16_t x, int16_t y, int16_t *x1,
                   int16_t *y1, uint16_t *w, uint16_t *h);
void getTextBounds(const __FlashStringHelper *s, int16_t x, int16_t y,
                   int16_t *x1, int16_t *y1, uint16_t *w, uint16_t *h);
void getTextBounds(const String &str, int16_t x, int16_t y, int16_t *x1,
                   int16_t *y1, uint16_t *w, uint16_t *h);
/**
 * @brief Визначити розмір шрифту
 */
void setTextSize(uint8_t s);
/**
 * @brief Визначити розмір шрифтц
 * 
 * @param sx Ширина символу
 * @param sy Висота символу
 */
void setTextSize(uint8_t sx, uint8_t sy);
/**
 * @brief Задати шрифт
 */
void setFont(const GFXfont *f = NULL);

/**********************************************************************/
/*!
  @brief  Задати кординати курсору
  @param  x    X координата в пікселях
  @param  y    Y координата в пікселях
*/
/**********************************************************************/
void setCursor(int16_t x, int16_t y);

/**********************************************************************/
/*!
  @brief   Set text font color with transparant background
  @param   c   16-bit 5-6-5 Color to draw text with
  @note    For 'transparent' background, background and foreground
           are set to same color rather than using a separate flag.
*/
/**********************************************************************/
void setTextColor(uint16_t c);

/**********************************************************************/
/*!
  @brief   Set text font color with custom background color
  @param   c   16-bit 5-6-5 Color to draw text with
  @param   bg  16-bit 5-6-5 Color to draw background/fill with
*/
/**********************************************************************/
void setTextColor(uint16_t c, uint16_t bg);

/**********************************************************************/
/*!
@brief  Set whether text that is too long for the screen width should
        automatically wrap around to the next line (else clip right).
@param  w  true for wrapping, false for clipping
*/
/**********************************************************************/
void setTextWrap(bool w);

/**********************************************************************/
/*!
  @brief  Enable (or disable) Code Page 437-compatible charset.
          There was an error in glcdfont.c for the longest time -- one
          character (#176, the 'light shade' block) was missing -- this
          threw off the index of every character that followed it.
          But a TON of code has been written with the erroneous
          character indices. By default, the library uses the original
          'wrong' behavior and old sketches will still work. Pass
          'true' to this function to use correct CP437 character values
          in your code.
  @param  x  true = enable (new behavior), false = disable (old behavior)
*/
/**********************************************************************/
void cp437(bool x = true);
/************************************************************************/
/*!
  @brief      Get width of the display, accounting for current rotation
  @returns    Width in pixels
*/
/************************************************************************/
int16_t width(void) const;

/************************************************************************/
/*!
  @brief      Get height of the display, accounting for current rotation
  @returns    Height in pixels
*/
/************************************************************************/
int16_t height(void) const;

/************************************************************************/
/*!
  @brief      Get rotation setting for display
  @returns    0 thru 3 corresponding to 4 cardinal rotations
*/
/************************************************************************/
uint8_t getRotation(void) const;

// get current cursor position (get rotation safe maximum values,
// using: width() for x, height() for y)
/************************************************************************/
/*!
  @brief      Отримати X позицію
  @returns    X координата в пікселях
*/
/************************************************************************/
int16_t getCursorX(void) const;

/************************************************************************/
/*!
  @brief      Отримати Y позицію
  @returns    Y координата в пікселях
*/
int16_t getCursorY(void) const;

/**
 * @}
 */