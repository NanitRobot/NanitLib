# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Doxygen with GitHub Pages dependencies preinstalled

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  USER_NAME: "${{ vars.USER_NAME }}"
  USER_EMAIL: "${{ vars.USER_EMAIL }}"
  GITHUB_PAGES: true
  

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
    # 1) 
      - name: Checkout
        uses: actions/checkout@v3

    # 2) Інсаталюємо ардуїно    
      # - name: Install Arduino
      #   run: sudo apt-get --fix-missing install arduino

    # 3) Інтсалюємо Arduino інструменти
      - name: install arduino-cli
        run: |
          curl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | sh -s 0.9.0
          sudo apt-get install gcc-avr 

    # 4) Встановлюємо плати Nanit та інші
      - name: Install NanitBoards
        run: |
          bin/arduino-cli config init --additional-urls https://nanitrobot.github.io/NanitLib/package_NanitCore_index.json
          bin/arduino-cli core update-index
          bin/arduino-cli core install Nanit:avr
          bin/arduino-cli core install arduino:avr

    # 5) Втановлюємо бібліотеки  
      - name: Install NanitLib
        run: |
          bin/arduino-cli lib install "NanitLib" 
          bin/arduino-cli lib install "TM1637" 
          bin/arduino-cli lib install "Keypad" 
          bin/arduino-cli lib install "Password" 
          bin/arduino-cli lib install "DHT sensor library"

    # 6) Генеруємо документацію
      - name: Doxygen action
        run: |
          git submodule add https://github.com/jothepro/doxygen-awesome-css.git doxygen-awesome-css

          ${{ secrets.AUTHORSCOMMAND }}

          # git submodule update --init --recursive

          sudo apt-get install -y doxygen graphviz

          LANGUAGE=English doxygen Doxyfile
          LANGUAGE=Ukrainian doxygen Doxyfile

          git submodule deinit -f doxygen-awesome-css
          

    # 3)
      - name: Setup Pages
        uses: actions/configure-pages@v3
    # 4) Update modules
      - name: Pull & update submodules recursively
        run: |
          git submodule update --init --recursive
          git submodule update --recursive --remote
    # 5) Компілюємо NanitInfo
          # ./bin/arduino-cli compile -b arduino:avr:mega ./examples/NanitInfo --build-properties "build.extra_flags=-DVERSION=1" -o "./binary/NanitInfoV1.ino"
      - run: |
          bin/arduino-cli compile -b arduino:avr:mega ./examples/NanitInfo --build-properties "build.extra_flags=-DVERSION=1" -o "./binary/NanitInfo.ino"
        name: Compile NanitInfo

      - run: |
          rm -fr $(pwd)/binary/core $(pwd)/binary/libraries $(pwd)/binary/preproc $(pwd)/binary/sketch || echo "NO PATH"
          rm $(pwd)/binary/build.options.json $(pwd)/binary/includes.cache $(pwd)/binary/NanitInfo.ino.eep $(pwd)/binary/*.elf || echo "NO PATH"

    # 6)
      - name: Build UD
      # //TODO додати компліію розумного будинку
        run: |
          # Клонуємо скетч
          git submodule add https://github.com/NanitRobot/ud_v3.1.git UD
          #__________________________WiFi_______________________________
          bin/arduino-cli compile -b arduino:avr:mega ./UD/ud_esp/ --build-properties "build.extra_flags=-DNANIT_USE_WiFi=1" -o "./binary/ud_WiFi_v3.1.ino"
          #__________________________BlTh_______________________________
          bin/arduino-cli compile -b arduino:avr:mega ./UD/ud_esp/ --build-properties "build.extra_flags=-DNANIT_USE_WiFi=1" -o "./binary/ud_BlTh_v3.1.ino"
          # Очищуємо
          git submodule deinit -f UD
          rm -fr ./NanitDiscovery
          # curl -fsSL https://raw.githubusercontent.com/NanitRobot/downloads/main/ud_v3.1.ino.hex -o binary/ud_v3.1.ino.hex

    # 7) Компілюємо дискавері

      - name: Build Discovery
        run: |
          git submodule add https://${{ secrets.NANIT_DISCOVERY_FULL }}@github.com/NanitRobot/Nanit.git NanitDiscovery
          # arduino-builder -build-path $(pwd)/binary -hardware /usr/share/arduino/hardware -tools /usr/share/arduino/hardware/tools/avr -fqbn=arduino:avr:mega:cpu=atmega2560 -libraries ~/Arduino/libraries -verbose -compile ./NanitDiscovery/nanite_v3.1/nanite_v3.1.ino
          #___________________________PLA_______________________________
          bin/arduino-cli compile -b arduino:avr:mega ./NanitDiscovery/nanite_v3.1/ --build-properties "build.extra_flags=-DNANIT_PLA_COVER=1" -o "./binary/nanite_PLA_v3.1.ino"
          #bin/arduino-cli compile -b arduino:avr:mega ./NanitDiscovery/nanite_v3.1/ --build-properties "build.extra_flags=-DABS_COVER_BEJEVIY=1" -o "./binary/nanite_ABS_limit_v3.1.ino"
          #___________________________ABS_______________________________
          bin/arduino-cli compile -b arduino:avr:mega ./NanitDiscovery/nanite_v3.1/ --build-properties "build.extra_flags=-DNANIT_ABS_COVER=1" -o "./binary/nanite_ABS_v3.1.ino"
          rm -fr $(pwd)/binary/core $(pwd)/binary/libraries $(pwd)/binary/preproc $(pwd)/binary/sketch || echo "NO PATH"
          rm $(pwd)/binary/build.options.json $(pwd)/binary/includes.cache $(pwd)/binary/NanitInfo.ino.eep $(pwd)/binary/*.elf || echo "NO PATH"
          git submodule deinit -f NanitDiscovery
          rm -fr ./NanitDiscovery
        env:
          GITHUB_TOKEN: ${{ secrets.NANIT_DISCOVERY_FULL }}

      - name: All in one file
        run: |
          echo "                         Last update: $(date)">> binary/readme
          touch "binary/$(date +%d-%m-%Y_%H:%M)"
          zip -qq binary/AllNanit.zip binary/*.hex binary/*.eep binary/readme "binary/$(date +%d-%m-%Y_%H:%M)"

    # 7)   
      - run: rm -fr bin/arduino-cli 

    # 9) Готуємо нові файли      
      - name: PrepareFiles
        run: | 
          # Базові налаштування
          NANIT_PATH="./Nanit"
          MEGACORE_PATH="./MegaCore"
          git submodule add https://${{ secrets.NANIT_DISCOVERY_FULL }}@github.com/NanitRobot/NanitIDE.git IDE

          mkdir ./Nanit
          cp ./IDE/*.txt  ./Nanit/
          # Додаємо репозиторії які розбиремо на донорські файли
          # Megacore треба зробити форк
          git submodule add https://github.com/MCUdude/MegaCore
          git submodule add https://github.com/adafruit/Adafruit-GFX-Library
          git submodule add https://github.com/esp8266/Arduino.git ESP8266
          #git submodule update --init --recursive
          # Обраховуємо додадкові шляхи

          NANIT_LIBRARY_PATH="${NANIT_PATH}/libraries"
          MEGACORE_LIBRARY_PATH="${MEGACORE_PATH}/avr/libraries"

          NANIT_CORE_PATH="${NANIT_PATH}/cores/"
          MEGACORE_CORE_PATH="${MEGACORE_PATH}/avr/cores/MCUdude_corefiles"

          PINS_PATH="./Nanit/variants/Nanit"
          FlyN_PATH="./Nanit/variants/FlyN"
          PINS_ARDUINO="pins_arduino.h"
          # Створюємо шлях для заголовчного файлц визначення пінів
          mkdir -p ${PINS_PATH}
          mkdir -p ${FlyN_PATH}
          #git submodule add https://github.com/NanitRobot/hex "${NANIT_PATH}/bootloaders"
          mkdir -p "${NANIT_PATH}/bootloaders" 
          # boot loaders ESP

          cp binary/*.hex "${NANIT_PATH}/bootloaders/"
          # Копіюємо файл MegaCore
          cp -ruf ./MegaCore/avr/variants/100-pin-arduino-mega/${PINS_ARDUINO} ${PINS_PATH}/${PINS_ARDUINO}

          cp -ruf ./ESP8266/variants/nodemcu/${PINS_ARDUINO} ${FlyN_PATH}/${PINS_ARDUINO}
          # Бібліотеки 
          # TODO зробити красиво в циклі
          mkdir -p ${NANIT_LIBRARY_PATH}

          # touch "${NANIT_LIBRARY_PATH}/touch"

          cp -ruf ${MEGACORE_LIBRARY_PATH}/EEPROM/ ${NANIT_LIBRARY_PATH}/EEPROM/
          # # HID
          # cp -ruf ${MEGACORE_LIBRARY_PATH}/HID/ ${NANIT_LIBRARY_PATH}/HID/
          # SPI
          cp -ruf ${MEGACORE_LIBRARY_PATH}/SPI/ ${NANIT_LIBRARY_PATH}/SPI/
          # SoftwareSerial
          cp -ruf ${MEGACORE_LIBRARY_PATH}/SoftwareSerial/ ${NANIT_LIBRARY_PATH}/SoftwareSerial/
          # Wire
          cp -ruf ${MEGACORE_LIBRARY_PATH}/Wire/ ${NANIT_LIBRARY_PATH}/Wire/
          # Шрифти
          cp -ruf ./Adafruit-GFX-Library/Fonts/ ${NANIT_LIBRARY_PATH}/Fonts/
          #core
          mkdir -p ${NANIT_CORE_PATH}
          cp -ruf ${MEGACORE_CORE_PATH}/ ${NANIT_CORE_PATH}/

          # КОСТИЛЬ
          mv ${NANIT_CORE_PATH}/MCUdude_corefiles "${NANIT_CORE_PATH}/MegaCore"

          #rm -fr "${NANIT_PATH}/bootloaders/.git*"
          # Розпаковуємо підготовлені файли
          # unzip -o NanitIDE.zip -d ${NANIT_PATH}
          # Пакуємо файл 
          zip -qq -r NanitCore.zip ${NANIT_PATH}

          # Прибираємо за собою
          rm -fr ${NANIT_PATH}

          # echo "========================================================"
          # echo "ESP BEGIN"
          # echo "========================================================"
          # mkdir -p ./Nanit/
          # #ESP8866
          # #bootloaders
          # cp -ruf ./ESP8266/bootloaders ./Nanit/bootloaders
          # #core
          # cp -ruf ./ESP8266/cores/esp8266/ ./Nanit/cores
          # #docs
          # cp -ruf ./ESP8266/doc ./Nanit/doc
          # #libraries
          # # cp -ruf ./ESP8266/libraries/ ./Nanit/libraries
          # #package
          # cp -ruf ./ESP8266/package ./Nanit/package
          # #tests
          # cp -ruf ./ESP8266/tests ./Nanit/tests
          # #tools
          # cp -ruf ./ESP8266/tools ./Nanit/tools
          # echo "========================================================"
          # echo "ESP END"
          # echo "========================================================"

          # zip -qq -r NanitESP.zip ${NANIT_PATH}

          # rm -fr ${NANIT_PATH}

          git submodule deinit -f MegaCore Adafruit-GFX-Library ESP8266 # Nanit/bootloaders
          git rm -fr ${MEGACORE_PATH}
          git rm -fr ./Adafruit-GFX-Library
          # git rm -fr ./ESP8266


          git submodule deinit -f IDE
          git rm -fr IDE

    # 10) Генеруємо пакет
      - name: Make package_index.json
        run: sh ./MakePackageJson.sh ${GITHUB_REPOSITORY} $(sha256sum NanitCore.zip) $(sha256sum NanitESP.zip)
      
    # 11) Build site

      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site
    # 12) UpLoad
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1




  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
