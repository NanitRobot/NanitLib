# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Doxygen with GitHub Pages dependencies preinstalled

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  USER_NAME: "${{ vars.USER_NAME }}"
  USER_EMAIL: "${{ vars.USER_EMAIL }}"
  GITHUB_PAGES: true

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
    # 1) 
      - name: Checkout
        uses: actions/checkout@v3

      - name: Arduino
        run: sudo apt-get install arduino

      - name: install arduino-cli
        run: |
          curl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | sh -s 0.9.0
          sudo apt-get install gcc-avr 

      - name: Install NanitLib
        run: bin/arduino-cli lib install "NanitLib"

      - name: Install NanitBoards
        run: |
          bin/arduino-cli config init --additional-urls https://nanitrobot.github.io/NanitLib/package_NanitCore_index.json
          bin/arduino-cli core update-index
          bin/arduino-cli core install Nanit:avr

      - name: Install NanitLib
        run: |
          bin/arduino-cli lib install "NanitLib"

      - name: Compile Nanit
        run: |
          arduino-builder -build-path $(pwd)/binary -hardware /usr/share/arduino/hardware -tools /usr/share/arduino/hardware/tools/avr -fqbn=arduino:avr:mega:cpu=atmega2560 -libraries ~/Arduino/libraries -verbose -compile ./examples/NanitInfo/NanitInfo.ino
          rm -fr $(pwd)/core $(pwd)/libraries $(pwd)/preproc $(pwd)/sketch
          rm $(pwd)/build.options.json $(pwd)/includes.cache $(pwd)/NanitInfo.ino.eep

      - name: DONE
        run: echo "DONE"   
        
        # Doxygen action
      

    # 2) Генеруємо документацію
      - name: Doxygen action
        # uses: mattnotmitt/doxygen-action@v1.9.4
        run: |
          git submodule add https://github.com/jothepro/doxygen-awesome-css.git doxygen-awesome-css

          git submodule update --init --recursive

          sudo apt-get install -y doxygen graphviz

          LANGUAGE=English doxygen Doxyfile
          LANGUAGE=Ukrainian doxygen Doxyfile

          git submodule deinit -f doxygen-awesome-css
          

    # 3)
      - name: Setup Pages
        uses: actions/configure-pages@v3
    # 4) Update modules
      - name: Pull & update submodules recursively
        run: |
          git submodule update --init --recursive
          git submodule update --recursive --remote
    # 5) Copy files
      - name: PrepareFiles
        run: sh ./PrepareFiles.sh
        # run: |
        #   git submodule update --init --recursive
        #   cp -ruf ./MegaCore/avr/variants/100-pin-arduino-mega/pins_arduino.h ./Nanit/variants/Nanit/pins_arduino.h 
        #   cp -ruf ./MegaCore/avr/cores/MCUdude_corefiles/* ./Nanit/cores/MegaCore/  
    # 6) Zip pacckeage
      # - name: Zippin
      #   # uses: montudor/action-zip@v1
      #   # with:
      #   run: zip -qq -r NanitCore.zip ./Nanit
    # 7) Build site
      - name: Make package_index.json
        run: sh ./MakePackageJson.sh ${GITHUB_REPOSITORY} $(sha256sum NanitCore.zip)
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site
    # 8) UpLoad
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1




  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
