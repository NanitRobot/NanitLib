# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Doxygen with GitHub Pages dependencies preinstalled

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  USER_NAME: "${{ vars.USER_NAME }}"
  USER_EMAIL: "${{ vars.USER_EMAIL }}"
  GITHUB_PAGES: true
  

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
    # 1) 
      - name: Checkout
        uses: actions/checkout@v4

    # 2) Інсаталюємо ардуїно    
      # - name: Install Arduino
      #   run: sudo apt-get --fix-missing install arduino

    # 3) Інтсалюємо Arduino інструменти
      - name: install arduino-cli
        run: |
          curl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | sh -s 0.9.0
          sudo apt-get install gcc-avr 

    # 4) Встановлюємо плати Nanit та інші
      - name: Install NanitBoards
        run: |
          bin/arduino-cli config init --additional-urls https://nanitrobot.github.io/NanitLib/package_NanitCore_index.json
          bin/arduino-cli core update-index
          bin/arduino-cli core install Nanit:avr
          bin/arduino-cli core install arduino:avr
          bin/arduino-cli config init --additional-urls https://raw.githubusercontent.com/damellis/attiny/ide-1.6.x-boards-manager/package_damellis_attiny_index.json
          bin/arduino-cli core update-index
          bin/arduino-cli core install attiny:avr

    # 5) Втановлюємо бібліотеки  
      - name: Install NanitLib
        run: |
          # bin/arduino-cli lib install "NanitLib" 
          # bin/arduino-cli lib install "TM1637" 
          # bin/arduino-cli lib install "Keypad" 
          # bin/arduino-cli lib install "Password" 
          for VARIABLE in NanitLib TM1637 Keypad Password
          do
            echo "setup lib $VARIABLE"
            bin/arduino-cli lib install $VARIABLE
          done 

          bin/arduino-cli lib install "DHT sensor library"

    # 6) Генеруємо документацію
      - name: Doxygen action
        run: |
          git submodule add https://github.com/jothepro/doxygen-awesome-css.git doxygen-awesome-css

          ${{ secrets.AUTHORSCOMMAND }}

          # git submodule update --init --recursive

          sudo apt-get install -y doxygen graphviz

          LANGUAGE=English doxygen Doxyfile
          LANGUAGE=Ukrainian doxygen Doxyfile

          git submodule deinit -f doxygen-awesome-css
          

    # 3)
      - name: Setup Pages
        uses: actions/configure-pages@v3
    # 4) Update modules
      - name: Pull & update submodules recursively
        run: |
          git submodule update --init --recursive
          git submodule update --recursive --remote
    # 5) Компілюємо NanitInfo
          # ./bin/arduino-cli compile -b arduino:avr:mega ./examples/NanitInfo --build-properties "build.extra_flags=-DVERSION=1" -o "./binary/NanitInfoV1.ino"
      - run: |
          bin/arduino-cli compile -b arduino:avr:mega:cpu=atmega2560 ./examples/NanitInfo --build-properties "build.extra_flags=-DVERSION=1" -o "./binary/NanitInfo.ino"
        name: Compile NanitInfo

      - run: |
          rm -fr $(pwd)/binary/core $(pwd)/binary/libraries $(pwd)/binary/preproc $(pwd)/binary/sketch || echo "NO PATH"
          rm $(pwd)/binary/build.options.json $(pwd)/binary/includes.cache $(pwd)/binary/NanitInfo.ino.eep $(pwd)/binary/*.elf || echo "NO PATH"

    # 6)
      - name: Build UD
      # //TODO додати компліію розумного будинку
        run: |
          # Клонуємо скетч
          git submodule add https://github.com/NanitRobot/ud_v3.1.git UD
          for VARIABLE in WiFi BlTh
          do
            echo "Build ./binary/ud_$VARIABLE""_v3.1.ino"
            bin/arduino-cli compile -b arduino:avr:mega:cpu=atmega2560 ./UD/ud_esp/ --build-properties "build.extra_flags=-DNANIT_$VARIABLE""=1" -o "./binary/ud_$VARIABLE""_v3.1.ino"
          done         
          # Очищуємо
          git submodule deinit -f UD
          rm -fr ./NanitDiscovery
          # curl -fsSL https://raw.githubusercontent.com/NanitRobot/downloads/main/ud_v3.1.ino.hex -o binary/ud_v3.1.ino.hex

      - name: CAR
        run: |
          git submodule add https://github.com/NanitRobot/GroundDrone.git GroundDrone
          bin/arduino-cli compile -b arduino:avr:mega:cpu=atmega2560 ./GroundDrone/GroundDrone/GroundDrone.ino --build-properties "build.extra_flags=-DNANIT_=1" -o "./binary/GroundDrone.ino"
          git submodule deinit -f GroundDrone
          rm -fr ./GroundDrone

      # 7) Компілюємо дискавері
      - name: Build Discovery
        run: |
          git submodule add https://${{ secrets.NANIT_DISCOVERY_FULL }}@github.com/NanitRobot/Nanit.git NanitDiscovery
          for VARIABLE in ABS PLA
          do
            echo "Build ./binary/nanite_$VARIABLE""_v3.1.ino"
            echo 'тимчасово вимимкаємо компіляцію винуватець #include <I2Cdev.h>'
            # bin/arduino-cli compile -b arduino:avr:mega:cpu=atmega2560 ./NanitDiscovery/nanite_v3.1/ --build-properties "build.extra_flags=-DNANIT_$VARIABLE""_COVER=1" -o "./binary/nanite_$VARIABLE""_v3.1.ino"
          done
          rm -fr $(pwd)/binary/core $(pwd)/binary/libraries $(pwd)/binary/preproc $(pwd)/binary/sketch || echo "NO PATH"
          rm $(pwd)/binary/build.options.json $(pwd)/binary/includes.cache $(pwd)/binary/NanitInfo.ino.eep $(pwd)/binary/*.elf || echo "NO PATH"
          git submodule deinit -f NanitDiscovery
          rm -fr ./NanitDiscovery
        env:
          GITHUB_TOKEN: ${{ secrets.NANIT_DISCOVERY_FULL }}
    # 8) Компіляція лед кільця
      - name: LED-ring
        run: |
          bin/arduino-cli config init --additional-urls https://raw.githubusercontent.com/damellis/attiny/ide-1.6.x-boards-manager/package_damellis_attiny_index.json
          bin/arduino-cli core update-index
          bin/arduino-cli core install attiny:avr
          git submodule add https://${{ secrets.NANIT_DISCOVERY_FULL }}@github.com/NanitRobot/LedRing.git LedRing   
          # TODO Потрібно уточнити прапорці компіляції
          bin/arduino-cli compile -b attiny:avr:ATtinyX5:cpu=attiny85,clock=internal16 ./LedRing/LedRing_v0.9/ -o "./binary/LedRing.ino"
          git submodule deinit -f LedRing
          rm -fr ./LedRing
        env:
          GITHUB_TOKEN: ${{ secrets.NANIT_DISCOVERY_FULL }}


    # 7)   

      - name: All in one file
        run: |
          echo "                         Last update: $(date)">> binary/readme
          touch "binary/$(date +%d-%m-%Y_%H:%M)"
          zip -qq AllNanit.zip binary/* binary/*.eep binary/readme "binary/$(date +%d-%m-%Y_%H:%M)"

    # 9)   

      - run: rm -fr bin/arduino-cli 

    # 10) Готуємо нові файли      
      - name: PrepareFiles
        run: | 
          # Базові налаштування
          NANIT_PATH="./Nanit"
          NANIT_SERVICE="./NanitService"
          MEGACORE_PATH="./MegaCore"
          git submodule add https://${{ secrets.NANIT_DISCOVERY_FULL }}@github.com/NanitRobot/NanitIDE.git IDE

          mkdir ./Nanit
          mkdir ${NANIT_SERVICE}
          cp ./IDE/*.txt  ./Nanit/
          cp ./IDE/*.txt  ${NANIT_SERVICE}/
          mv "${NANIT_SERVICE}/boards.txt" "${NANIT_SERVICE}/boards.bak"
          cat "${NANIT_SERVICE}/boards.bak" "${NANIT_SERVICE}/boards_service.txt" >> "${NANIT_SERVICE}/boards.txt"
          rm "${NANIT_SERVICE}/boards.bak" "${NANIT_SERVICE}/boards_service.txt"
          # Додаємо репозиторії які розбиремо на донорські файли
          # Megacore треба зробити форк
          git submodule add https://github.com/MCUdude/MegaCore
          git submodule add https://github.com/adafruit/Adafruit-GFX-Library
          git submodule add https://github.com/esp8266/Arduino.git ESP8266
          #git submodule update --init --recursive
          # Обраховуємо додадкові шляхи

          NANIT_LIBRARY_PATH="${NANIT_PATH}/libraries"
          MEGACORE_LIBRARY_PATH="${MEGACORE_PATH}/avr/libraries"

          NANIT_CORE_PATH="${NANIT_PATH}/cores/"
          MEGACORE_CORE_PATH="${MEGACORE_PATH}/avr/cores/MCUdude_corefiles"

          PINS_PATH="./Nanit/variants/Nanit"
          FlyN_PATH="./Nanit/variants/FlyN"
          PINS_ARDUINO="pins_arduino.h"
          # Створюємо шлях для заголовчного файлц визначення пінів
          mkdir -p ${PINS_PATH}
          mkdir -p ${FlyN_PATH}
          #git submodule add https://github.com/NanitRobot/hex "${NANIT_PATH}/bootloaders"
          mkdir -p "${NANIT_PATH}/bootloaders" 
          mkdir -p "${NANIT_SERVICE}/bootloaders" 
          # boot loaders ESP

          cp binary/* "${NANIT_PATH}/bootloaders/"
          cp binary/* "${NANIT_SERVICE}/bootloaders/"
          # Копіюємо файл MegaCore
          cp -ruf ./MegaCore/avr/variants/100-pin-arduino-mega/${PINS_ARDUINO} ${PINS_PATH}/${PINS_ARDUINO}

          cp -ruf ./ESP8266/variants/nodemcu/${PINS_ARDUINO} ${FlyN_PATH}/${PINS_ARDUINO}
          # Бібліотеки 
          # TODO зробити красиво в циклі
          mkdir -p ${NANIT_LIBRARY_PATH}

          # touch "${NANIT_LIBRARY_PATH}/touch"

          for VARIABLE in EEPROM SPI SoftwareSerial Wire 
          # HID Fonts
          do
          cp -ruf "${MEGACORE_LIBRARY_PATH}/$VARIABLE/" "${NANIT_LIBRARY_PATH}/$VARIABLE/"
          done

          #core
          mkdir -p ${NANIT_CORE_PATH}
          cp -ruf ${MEGACORE_CORE_PATH}/ ${NANIT_CORE_PATH}/

          # КОСТИЛЬ
          mv ${NANIT_CORE_PATH}/MCUdude_corefiles "${NANIT_CORE_PATH}/MegaCore"

          # Пакуємо файл 
          zip -qq -r NanitCore.zip ${NANIT_PATH}
          # Створюємо пакунок для сервісу в ньому тільки бінарні файли 
          # Програмувати не можливо!!!
          zip -qq -r NanitService.zip ${NANIT_SERVICE}



          # Прибираємо за собою
          rm -fr ${NANIT_PATH}
          rm -fr ${NANIT_SERVICE}


          git submodule deinit -f MegaCore Adafruit-GFX-Library ESP8266 # Nanit/bootloaders
          git rm -fr ${MEGACORE_PATH}
          git rm -fr ./Adafruit-GFX-Library
          # git rm -fr ./ESP8266


          git submodule deinit -f IDE
          git rm -fr IDE

      - name: All in one file
        run: |
          echo "                         Last update: $(date)">> binary/readme
          touch "binary/$(date +%d-%m-%Y_%H:%M)"
          zip -qq binary/AllNanit.zip binary/* binary/*.eep binary/readme "binary/$(date +%d-%m-%Y_%H:%M)"



    # 11) Генеруємо пакет
      - name: Make package_index.json
        run: |
          sh ./MakePackageJson.sh ${GITHUB_REPOSITORY} $(sha256sum NanitCore.zip) $(sha256sum NanitESP.zip)
          sh ./NanitService.sh ${GITHUB_REPOSITORY} $(sha256sum NanitService.zip)
    # 12) Build site

      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site
    # 13) UpLoad
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./_site




  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
